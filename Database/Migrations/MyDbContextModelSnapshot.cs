// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.Models.tbChargePoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChargePointId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("charge_point_id");

                    b.Property<string>("ClientCertThumb")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("client_cert_thumb");

                    b.Property<string>("Landmark")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("landmark");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("password");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Street")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("street");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_tb_charge_points");

                    b.HasIndex("ChargePointId")
                        .IsUnique()
                        .HasDatabaseName("ix_tb_charge_points_charge_point_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_tb_charge_points_status");

                    b.ToTable("tb_charge_points", (string)null);
                });

            modelBuilder.Entity("Database.Models.tbConnector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargePointId")
                        .HasColumnType("integer")
                        .HasColumnName("charge_point_id");

                    b.Property<int>("ConnectorId")
                        .HasColumnType("integer")
                        .HasColumnName("connector_id");

                    b.Property<int>("ConnectorTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("connector_type_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Throughput")
                        .HasColumnType("integer")
                        .HasColumnName("throughput");

                    b.HasKey("Id")
                        .HasName("pk_tb_connectors");

                    b.HasIndex("ChargePointId")
                        .HasDatabaseName("ix_tb_connectors_charge_point_id");

                    b.ToTable("tb_connectors", (string)null);
                });

            modelBuilder.Entity("Database.Models.tbConnectorStatus", b =>
                {
                    b.Property<string>("ChargePointId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("charge_point_id")
                        .HasColumnOrder(0);

                    b.Property<int>("ConnectorId")
                        .HasColumnType("integer")
                        .HasColumnName("connector_id")
                        .HasColumnOrder(1);

                    b.Property<double?>("ChargeRateKW")
                        .HasColumnType("double precision")
                        .HasColumnName("charge_rate_kw");

                    b.Property<int>("ConnectorTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("connector_type_id");

                    b.Property<Guid?>("DriverUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_user_id");

                    b.Property<string>("DriverUserName")
                        .HasColumnType("text")
                        .HasColumnName("driver_user_name");

                    b.Property<double?>("MeterKWH")
                        .HasColumnType("double precision")
                        .HasColumnName("meter_kwh");

                    b.Property<DateTime?>("MeterValueTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("meter_value_time");

                    b.Property<double?>("Soc")
                        .HasColumnType("double precision")
                        .HasColumnName("soc");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("StatusTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("status_time");

                    b.Property<int?>("Throughput")
                        .HasColumnType("integer")
                        .HasColumnName("throughput");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_id");

                    b.HasKey("ChargePointId", "ConnectorId")
                        .HasName("pk_tb_connector_statuses");

                    b.ToTable("tb_connector_statuses", (string)null);
                });

            modelBuilder.Entity("Database.Models.tbConnector", b =>
                {
                    b.HasOne("Database.Models.tbChargePoint", "ChargePoint")
                        .WithMany("Connectors")
                        .HasForeignKey("ChargePointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tb_connectors_tb_charge_points_charge_point_id");

                    b.Navigation("ChargePoint");
                });

            modelBuilder.Entity("Database.Models.tbChargePoint", b =>
                {
                    b.Navigation("Connectors");
                });
#pragma warning restore 612, 618
        }
    }
}
